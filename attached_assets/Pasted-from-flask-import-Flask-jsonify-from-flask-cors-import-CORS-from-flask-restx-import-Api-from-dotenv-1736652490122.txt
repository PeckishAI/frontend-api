from flask import Flask, jsonify
from flask_cors import CORS
from flask_restx import Api
from dotenv import load_dotenv
import os
import logging
from flask_restx import Namespace, Resource

load_dotenv(override=True)

# Import views
from views.auth import auth_bp
from views.metrics import metrics_bp
from views.ingredients import ingredients_bp
from views.tags import tags_bp
from views.units import units_bp
from views.suppliers import suppliers_bp
from views.restaurants import restaurants_bp
from views.orders import order_bp
from views.documents import document_bp
from views.menu import menu_bp
from views.categories import categories_bp
from views.users import users_bp
from views.quantity import quantity_bp

from database.supabase_db import db

# Configure detailed logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()])
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Initialize Flask app
app = Flask(__name__)

# Configure CORS with credentials support
CORS(app, 
    resources={
        r"/*": {
            "origins": ["https://frontend-peckish.replit.app", "http://localhost:5000"],
            "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            "allow_headers": ["Content-Type", "Authorization", "Accept", "X-Requested-With"],
            "supports_credentials": True,
            "expose_headers": ["Content-Type", "X-CSRFToken"],
            "allow_credentials": True,
            "max_age": 3600
        }
    })

# Initialize API with swagger
api = Api(app,
          version='1.0',
          title='Peckish Backend API',
          description='Contact @spradier for any information.',
          doc='/')

# Register namespaces
api.add_namespace(auth_bp, path='/auth')
api.add_namespace(restaurants_bp, path='/restaurants')
api.add_namespace(users_bp, path='/users')
api.add_namespace(metrics_bp, path='/metrics')
api.add_namespace(ingredients_bp, path='/ingredients')
api.add_namespace(units_bp, path='/units')
api.add_namespace(quantity_bp, path='/quantity')
api.add_namespace(menu_bp, path='/menu')
api.add_namespace(categories_bp, path='/categories')
api.add_namespace(suppliers_bp, path='/suppliers')
api.add_namespace(order_bp, path='/orders')
api.add_namespace(tags_bp, path='/tags')
api.add_namespace(document_bp, path='/documents')

logger.info(
    "Registered inventory, units, suppliers, restaurants, and new order namespaces"
)

@app.route('/healthcheck')
def healthcheck():
    """Basic health check endpoint"""
    return jsonify({"status": "healthy"}), 200

if __name__ == "__main__":
    try:
        port = int(os.getenv("PORT", 8080))
        logger.info("=" * 50)
        logger.info("Application Starting")
        logger.info(f"Port: {port}")
        logger.info(f"Debug Mode: {app.debug}")
        logger.info("=" * 50)
        app.run(host='0.0.0.0', port=port, debug=True, use_reloader=True)
    except Exception as e:
        logger.error("=" * 50)
        logger.error(f"Failed to start server: {str(e)}")
        logger.exception(e)
        logger.error("=" * 50)
        raise e